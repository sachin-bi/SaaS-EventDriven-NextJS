
//steps of saas event driven architecture todo webapp

1 - installed nextjs app
2 - created project named saas-EDM in neon(postgresql)
3 - installed prisma dev dependency ```npm install prisma --save-dev```
4 - installed prisma init datasoure provider postgresql ```npx prisma init --datasource-provider postgresql```
5 - design model in prisma/schema.prisma
6 - migrate to sync with remote db model then generate to get prisma client
7 - created lib/prisma.ts - for making db connection and using CRUD operations


## Handle Custom Signup flow in Clerk
8 - focused on sign-up/page.tsx
9 - several components(like card,btn,etc) from shadcn installed
9 - lucide-react was installed for icons, like Eye, Eyeoff
10 - Custom Clerk was set in Signup/page.tsx for Signup then verify and createdSession then route Puse to login page


## Clerk Middleware for Role based access and signin page
11 - create public route available for all... using clerkMiddleware , createRouteMatcher in Middleware.ts
12 - Middleware.ts: implements authentication and authorization for Next.js routes using Clerk. It redirects unauthenticated users to the sign-in page, redirects admin users to the admin dashboard, and redirects non-admin users to the user dashboard. It also handles errors gracefully and redirects to an error page.
13 - Custom signin page completed with Clerk signin.


## Handling Webhooks | Clerk Webhooks
14 - Webhook initiated for user.created on Clerk and WEBHOOKS_SECRET is set to .env
15 - installed svix npm, for Webhook decode and identify
16 - localTunnel installed, for getting a domain, which is provided to Clerk/endpoint.
17 - designed app\api\webhook\register\route.ts
18 - Verify Webhooks with the Svix Libraries , docs(https://docs.svix.com/receiving/verifying-payloads/how)
19 - get verifed from webhook/Clerk, before registering data to db 

## prisma CRUD and pagination
20 - subsription route with GET & POST //TODO: add a payment gate way
21 - user can not post more than 3 todo , for that they need to take subsription.
22 - route created for todos pagination, add todo, delete todo
23 - admin route done using clerkclient metadata.

## Handling API calls in frontend
24 - dashboard/page.tsx , installed usehooks(https://usehooks-ts.com/react-hook/use-debounce-value) 
25 - todos page added
26 - 




